@page "/contract/{id}/check"

@inject HttpClient HttpClient
@inject NavigationManager Navigation
@using System.Text.Json
@using CheckerApp.Shared.Common.JsonConverters
@using CheckerApp.Shared.Models.Commands

<div class="alert alert-secondary">
    <h2>Протокол испытаний оборудования СОИ</h2>
    <p>по договору @ContractCheck.Contract?.Name, дог. @ContractCheck.Contract?.ContractNumber, вн.проект @ContractCheck.Contract?.DomesticNumber</p>
</div>

<EditForm Model="ContractCheck" OnValidSubmit="Submit">

    @for (int i = 0; i < ContractCheck.HardwareChecks.Count; i++)
    {
        var index = i;

        <HardwareCheckStatus @bind-Value="ContractCheck.HardwareChecks[index]" />
    }

    <button type="submit" class="btn btn-success"> Отправить</button>

</EditForm>

@code {

    [Parameter]
    public string Id { get; set; }

    ContractCheckVm ContractCheck { get; set; } = new ContractCheckVm();

    JsonSerializerOptions JsonOptions { get; set; }

    string json;

    protected async override Task OnInitializedAsync()
    {
        JsonOptions = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
            Converters = { new HardwareConverter() }
        };

        ContractCheck = await HttpClient.GetFromJsonAsync<ContractCheckVm>($"api/check/{int.Parse(Id)}", JsonOptions);
    }

    protected async Task Submit()
    {
        var command = new CreateCheckCommandVm { ContractCheck = ContractCheck };
        var result = await HttpClient.PostAsJsonAsync($"api/check", command, JsonOptions);

        if (result.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/");
        }
    }
}
