@page "/contract/{id}/check"

@using System.Text.Json
@using CheckerApp.Shared.Common.JsonConverters
@using CheckerApp.Shared.Models.Commands

@inject HttpClient HttpClient
@inject NavigationManager Navigation

<div class="alert alert-secondary">
    <h2>Протокол испытаний оборудования СОИ</h2>
    <p>по договору @CheckList.Contract?.Name, дог. @CheckList.Contract?.ContractNumber, вн.проект @CheckList.Contract?.DomesticNumber</p>
</div>

<EditForm Model="CheckList" OnValidSubmit="Submit">

    @for (int i = 0; i < CheckList.HardwareChecks.Count; i++)
    {
        var index = i;

        <HardwareCheckStatus @bind-Value="CheckList.HardwareChecks[index]" />
    }

    @if (ScadaList == null)
    {
        <div class="spinner"></div>
    }
    else
    {
        @for (int i = 0; i < ScadaList.Length; i++)
        {
            var index = i;
            <SoftwareCheckStatus @bind-Value="ScadaList[index]" />
        }
    }

    <button type="submit" class="btn btn-success"> Отправить</button>

</EditForm>

@code {

    [Parameter]
    public string Id { get; set; }

    CheckListVm CheckList { get; set; } = new CheckListVm();

    SoftwareCheckDto[] ScadaList { get; set; }

    JsonSerializerOptions JsonOptions { get; set; }

    protected async override Task OnInitializedAsync()
    {
        JsonOptions = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
            Converters = { new HardwareConverter(), new SoftwareConverter() }
        };

        CheckList = await HttpClient.GetFromJsonAsync<CheckListVm>($"api/check/{int.Parse(Id)}", JsonOptions);
        ScadaList = CheckList.SoftwareChecks.Where(e=> e.Software is CheckerApp.Shared.Models.Software.ScadaDto).ToArray();
    }

    protected async Task Submit()
    {
        var command = new UpsertCheckResultCommandVm { CheckResult = CheckList };
        var result = await HttpClient.PostAsJsonAsync($"api/check", command, JsonOptions);

        if (result.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/");
        }
    }
}
