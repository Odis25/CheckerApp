@page "/contracts"
@attribute [Authorize]

@using CheckerApp.Client.Shared.Modal

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IModalService Modal


@if (ContractsList == null)
{
    <div class="spinner"></div>
}
else
{
    <h1>Список договоров</h1>
    <hr />

    <table class="table table-hover mat-elevation-z5 app-table">
        <thead class="thead-dark mat-elevation-z5">
            <tr>
                <th scope="row">Номер договора</th>
                <th scope="row">Внутренний номер проекта</th>
                <th scope="row">Название</th>
                <th scope="row"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ContractsList.Contracts)
            {
                <tr @ondblclick="()=>NavigateTo(item.Id)" style="cursor:pointer">
                    <td>@item.ContractNumber</td>
                    <td>@item.DomesticNumber</td>
                    <td>@item.Name</td>
                    <td>
                        <button class="btn btn-outline-secondary" @onclick="@(async ()=> await EditContract(item.Id))"><span class="oi oi-pencil"></span></button>
                        <button class="btn btn-outline-danger" @onclick="@(async ()=> await DeleteContract(item.Id))"><span class="oi oi-trash"></span></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    ContractsListVm ContractsList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ContractsList = await HttpClient.GetFromJsonAsync<ContractsListVm>("api/contract");
    }

    private void NavigateTo(int id)
    {
        NavigationManager.NavigateTo($"/contract/{id}/detail");
    }

    private async Task AddContract()
    {
        var formModal = Modal.Show<AddContractModal>("Новый договор");
        var result = await formModal.Result;

        if (!result.Cancelled)
        {
            ContractsList = await HttpClient.GetFromJsonAsync<ContractsListVm>("api/contract");
        }
    }

    private Task EditContract(int id)
    {
        //await HttpClient.PutAsJsonAsync("");
        return Task.CompletedTask;
    }

    private async Task DeleteContract(int id)
    {
        await HttpClient.DeleteAsync($"api/contract/{id}");

        ContractsList = await HttpClient.GetFromJsonAsync<ContractsListVm>("api/contract");
    }
}
