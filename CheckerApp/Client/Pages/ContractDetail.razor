@page "/contract/{id}/detail"

@using CheckerApp.Client.Shared.Modal
@using CheckerApp.Shared.Models.Commands

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IModalService Modal


@if (Contract == null)
{
    <div class="spinner"></div>
}
else
{
    <h1>Информация о договоре</h1>
    <hr />
    <table>
        <tbody>
            <tr>
                <td class="pr-4 font-weight-bold">Номер</td>
                <td>@Contract.ContractNumber</td>
            </tr>
            <tr>
                <td class="pr-4 font-weight-bold">Внутренний номер</td>
                <td>@Contract.DomesticNumber</td>
            </tr>
            <tr>
                <td class="pr-4 font-weight-bold">Название</td>
                <td>@Contract.Name</td>
            </tr>
            <tr>
                <td class="pr-4 font-weight-bold">Протокол проверки</td>
                <td>@(Contract.HasProtocol ? "Есть": "Нет")</td>
            </tr>
        </tbody>
    </table>
    <hr />
    <div>
        <button class="btn btn-primary" @onclick="AddHardware"><span class="oi oi-plus" aria-hidden="true"></span> Добавить оборудование</button>
        <button class="btn btn-primary" @onclick="AddSoftware"><span class="oi oi-plus" aria-hidden="true"></span> Добавить ПО</button>
        <button class="btn btn-secondary" @onclick="AddDocument"><span class="oi oi-document" aria-hidden="true"></span> Создать протокол проверки</button>
        <button class="btn btn-success" @onclick="DownloadFile" disabled="@(Contract.HasProtocol == false)"><span class="oi oi-cloud-download" aria-hidden="true"></span> Скачать протокол проверки</button>
    </div>
    <hr />
    <div class="row">
        <div class="col-sm">
            <MatTable Items="@Contract.HardwareList" Class="mat-elevation-z5" Striped="true" AllowSelection="true"
                      ShowPaging="false" ShowFooter="false" PageSize="10" OnRowDbClick="(item)=> NavigateTo(((HardwareVm)item).Id)">
                <MatTableHeader>
                    <th style="min-width:300px">Тип оборудования</th>
                    <th style="min-width:300px">Позиция по прокту</th>
                    <th style="min-width:300px">Серийный номер</th>
                    <th></th>
                </MatTableHeader>
                <MatTableRow>
                    <td>@context.HardwareType.GetDisplayName()</td>
                    <td>@context.Position</td>
                    <td>@context.SerialNumber</td>
                    <td>
                        <button class="btn btn-secondary" @onclick="@(async ()=> await EditHardware(context.Id))"><span class="oi oi-pencil"></span> </button>
                        <button class="btn btn-danger" @onclick="@(async ()=> await DeleteHardware(context.Id))"><span class="oi oi-trash"></span> Удалить</button>
                    </td>
                </MatTableRow>
            </MatTable>
        </div>
        <div class="col-sm">
            <MatTable Items="@Contract.SoftwareList" Class="mat-elevation-z5" Striped="true" AllowSelection="true"
                      ShowPaging="false" ShowFooter="false" PageSize="10" OnRowDbClick="(item)=> NavigateTo(((HardwareVm)item).Id)">
                <MatTableHeader>
                    <th style="min-width:300px">Тип ПО</th>
                    <th style="min-width:300px">Название ПО</th>
                    <th style="min-width:300px">Версия ПО</th>
                    <th></th>
                </MatTableHeader>
                <MatTableRow>
                    <td>@context.SoftwareType.GetDisplayName()</td>
                    <td>@context.Name</td>
                    <td>@context.Version</td>
                    <td>
                        <button class="btn btn-secondary" @onclick="@(async ()=> await EditHardware(context.Id))"><span class="oi oi-pencil"></span> </button>
                        <button class="btn btn-danger" @onclick="@(async ()=> await DeleteSoftware(context.Id))"><span class="oi oi-trash"></span> Удалить</button>
                    </td>
                </MatTableRow>
            </MatTable>
        </div>
    </div>   
}


@code {

    [Parameter]
    public string Id { get; set; }

    protected ContractDetailVm Contract { get; set; }

    protected CreateHardwareCommandVm Command = new CreateHardwareCommandVm();

    protected override async Task OnParametersSetAsync()
    {
        Contract = await HttpClient.GetFromJsonAsync<ContractDetailVm>($"api/contract/{int.Parse(Id)}");
    }

    private void NavigateTo(int id)
    {
        NavigationManager.NavigateTo($"/hardware/{id}/detail");
    }

    private async Task AddHardware()
    {
        var parameters = new ModalParameters();

        parameters.Add("ContractId", Id);

        var modalForm = Modal.Show<AddHardwareModal>("Новое оборудование", parameters);
        var result = await modalForm.Result;

        if (!result.Cancelled)
        {
            Contract = await HttpClient.GetFromJsonAsync<ContractDetailVm>($"api/contract/{int.Parse(Id)}");
        }
    }

    private async Task AddSoftware()
    {
        var parameters = new ModalParameters();

        parameters.Add("ContractId", Id);

        var modalForm = Modal.Show<AddSoftwareModal>("Новое ПО", parameters);
        var result = await modalForm.Result;

        if (!result.Cancelled)
        {
            Contract = await HttpClient.GetFromJsonAsync<ContractDetailVm>($"api/contract/{int.Parse(Id)}");
        }
    }

    private void DownloadFile()
    {
        NavigationManager.NavigateTo($"/api/check/download/{Id}", true);
    }

    private void AddDocument()
    {
        NavigationManager.NavigateTo($"/contract/{Id}/check");
    }

    private Task EditHardware(int hardwareId)
    {
        //await HttpClient.PutAsJsonAsync("");
        return Task.CompletedTask;
    }

    private async Task DeleteHardware(int id)
    {
        await HttpClient.DeleteAsync($"api/hardware/{id}");

        Contract = await HttpClient.GetFromJsonAsync<ContractDetailVm>($"api/contract/{int.Parse(Id)}");
    }

    private async Task DeleteSoftware(int id)
    {
        await HttpClient.DeleteAsync($"api/software/{id}");

        Contract = await HttpClient.GetFromJsonAsync<ContractDetailVm>($"api/contract/{int.Parse(Id)}");
    }

}
