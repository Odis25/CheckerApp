@page "/contract/{id}/detail"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IModalService Modal
@using CheckerApp.Shared.Models.Commands

@if (Contract == null)
{
    <div class="spinner"></div>
}
else
{
    <h1>Информация о договоре</h1>
    <hr />
    <table>
        <tbody>
            <tr>
                <td class="pr-4 font-weight-bold">Номер</td>
                <td>@Contract.ContractNumber</td>
            </tr>
            <tr>
                <td class="pr-4 font-weight-bold">Внутренний номер</td>
                <td>@Contract.DomesticNumber</td>
            </tr>
            <tr>
                <td class="pr-4 font-weight-bold">Название</td>
                <td>@Contract.Name</td>
            </tr>
        </tbody>
    </table>
    <hr />
    <div>
        <button class="btn btn-primary" @onclick="AddHardware"><span class="oi oi-plus" aria-hidden="true"></span> Добавить оборудование</button>
        <button class="btn btn-primary" @onclick="AddDocument"><span class="oi oi-document" aria-hidden="true"></span> Создать протокол</button>
    </div>
    <hr />

    <MatTable Items="@Contract.HardwareList" Class="mat-elevation-z5" Striped="true" AllowSelection="true"
              ShowPaging="false" ShowFooter="false" OnRowDbClick="(item)=> NavigateTo(((HardwareVm)item).Id)">
        <MatTableHeader>
            <th style="min-width:300px">Тип оборудования</th>
            <th style="min-width:300px">Позиция по прокту</th>
            <th style="min-width:300px">Серийный номер</th>
            <th></th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.HardwareType.GetDisplayName()</td>
            <td>@context.Position</td>
            <td>@context.SerialNumber</td>
            <td>
                <button class="btn btn-secondary" @onclick="@(async ()=> await EditHardware(context.Id))"><span class="oi oi-pencil"></span></button>
                <button class="btn btn-danger" @onclick="@(async ()=> await DeleteHardware(context.Id))"><span class="oi oi-trash"></span></button>
            </td>
        </MatTableRow>
    </MatTable>

}


@code {

    [Parameter]
    public string Id { get; set; }

    protected ContractDetailVm Contract { get; set; }

    protected CreateHardwareCommandVm Command = new CreateHardwareCommandVm();

    protected override async Task OnInitializedAsync()
    {
        Contract = await HttpClient.GetFromJsonAsync<ContractDetailVm>($"api/contract/{int.Parse(Id)}");
    }

    private void NavigateTo(int id)
    {
        NavigationManager.NavigateTo($"/hardware/{id}/detail");
    }

    private async Task AddHardware()
    {
        var parameters = new ModalParameters();

        parameters.Add("ContractId", Id);

        var modalForm = Modal.Show<AddHardwareModal>("Новое оборудование", parameters);
        var result = await modalForm.Result;

        if (!result.Cancelled)
        {
            Contract = await HttpClient.GetFromJsonAsync<ContractDetailVm>($"api/contract/{int.Parse(Id)}");
        }
    }

    private void AddDocument()
    {
        NavigationManager.NavigateTo($"/contract/{Id}/check");
    }

    private Task EditHardware(int hardwareId)
    {
        return Task.CompletedTask;
    }

    private Task DeleteHardware(int hardwareId)
    {
        return Task.CompletedTask;
    }

}
