@page "/contract/{id}/detail"

@using CheckerApp.Client.Shared.Modal
@using CheckerApp.Shared.Models.Commands

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IModalService Modal


@if (Contract == null)
{
    <div class="spinner"></div>
}
else
{
    <div class="alert alert-primary mat-elevation-z5">
        <h3>Информация о договоре</h3>
        <hr />
        <div class="row">
            <div class="col-xl">
                <div class="alert alert-secondary h-100 shadow-lg border">
                    <table class="h-100">
                        <tbody>
                            <tr>
                                <td class="pr-4 font-weight-bold">Номер</td>
                                <td>@Contract.ContractNumber</td>
                            </tr>
                            <tr>
                                <td class="pr-4 font-weight-bold">Внутренний номер</td>
                                <td>@Contract.DomesticNumber</td>
                            </tr>
                            <tr>
                                <td class="pr-4 font-weight-bold">Название</td>
                                <td>@Contract.Name</td>
                            </tr>
                            <tr>
                                <td class="pr-4 font-weight-bold">Протокол проверки</td>
                                <td class="@ProtocolCss">@(Contract.HasProtocol ? "Есть": "Нет")</td>
                            </tr>
                            <tr>
                                <td class="pr-4 font-weight-bold">Добавлен</td>
                                <td>@Contract.CreatedBy (@Contract.Created.ToString("dd/MM/yyyy - HH:mm:ss"))</td>
                            </tr>
                            <tr>
                                <td class="pr-4 font-weight-bold">Изменен</td>
                                <td>@(Contract.LastModified != null ? $"{Contract.LastModifiedBy} ({Contract.LastModified?.ToString("dd/MM/yyyy - HH:mm:ss")})" : "----")</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="col-xl-3">
                <div class="d-flex flex-column flex-lg-row flex-xl-column control-panel">
                    <button class="btn btn-dark text-nowrap mr-lg-1" @onclick="AddHardware"><span class="oi oi-monitor mr-2" aria-hidden="true"></span> Новое оборудование</button>
                    <button class="btn btn-dark text-nowrap mr-lg-1" @onclick="AddSoftware"><span class="oi oi-code mr-2" aria-hidden="true"></span> Новое ПО</button>
                    <button class="btn btn-dark text-nowrap mr-lg-1" @onclick="AddDocument"><span class="oi oi-task mr-2" aria-hidden="true"></span> Создать протокол</button>
                    <button class="btn btn-success text-nowrap mr-lg-1" @onclick="DownloadFile" disabled="@(Contract.HasProtocol == false)"><span class="oi oi-cloud-download mr-2" aria-hidden="true"></span> Скачать протокол</button>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xl">
            <h5>Список оборудования:</h5>
            <div class="table-container hardware-table mat-elevation-z5">
                <table class="table table-hover app-table">
                    <thead class="thead-dark mat-elevation-z5">
                        <tr>
                            <th scope="row">Тип</th>
                            <th scope="row">Позиция</th>
                            <th scope="row">Серийный номер</th>
                            <th scope="row"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Contract.HardwareList)
                        {
                            <tr @ondblclick="()=>NavigateTo(item.Id)">
                                <td>@item.HardwareType.GetDisplayName()</td>
                                <td>@item.Position</td>
                                <td>@item.SerialNumber</td>
                                <td>
                                    <button class="btn btn-outline-secondary" @onclick="@(async ()=> await EditHardware(item.Id))"><span class="oi oi-pencil"></span></button>
                                    <button class="btn btn-outline-danger" @onclick="@(async ()=> await DeleteHardware(item.Id))"><span class="oi oi-trash"></span></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="col-xl">
            <h5>Список программного обеспечения:</h5>
            <div class="table-container hardware-table mat-elevation-z5">
                <table class="table table-hover app-table">
                    <thead class="thead-dark mat-elevation-z5">
                        <tr>
                            <th scope="row">Тип</th>
                            <th scope="row">Название</th>
                            <th scope="row">Версия</th>
                            <th scope="row"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Contract.SoftwareList)
                        {
                            <tr>
                                <td>@item.SoftwareType.GetDisplayName()</td>
                                <td>@item.Name</td>
                                <td>@item.Version</td>
                                <td>
                                    <button class="btn btn-outline-secondary" @onclick="@(async ()=> await EditSoftware(item.Id))"><span class="oi oi-pencil"></span></button>
                                    <button class="btn btn-outline-danger" @onclick="@(async ()=> await DeleteSoftware(item.Id))"><span class="oi oi-trash"></span></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}


@code {

    [Parameter]
    public string Id { get; set; }

    protected ContractDetailVm Contract { get; set; }

    protected string ProtocolCss => Contract.HasProtocol ? "protocol" : "no-protocol";

    protected CreateHardwareCommandVm Command = new CreateHardwareCommandVm();

    protected override async Task OnParametersSetAsync()
    {
        Contract = await HttpClient.GetFromJsonAsync<ContractDetailVm>($"api/contract/{int.Parse(Id)}");
    }

    private void NavigateTo(int id)
    {
        NavigationManager.NavigateTo($"/hardware/{id}/detail");
    }

    private async Task AddHardware()
    {
        var parameters = new ModalParameters();

        parameters.Add("ContractId", Id);

        var modalForm = Modal.Show<AddHardwareModal>("Новое оборудование", parameters);
        var result = await modalForm.Result;

        if (!result.Cancelled)
        {
            Contract = await HttpClient.GetFromJsonAsync<ContractDetailVm>($"api/contract/{int.Parse(Id)}");
        }
    }

    private async Task AddSoftware()
    {
        var parameters = new ModalParameters();

        parameters.Add("ContractId", Id);

        var modalForm = Modal.Show<AddSoftwareModal>("Новое ПО", parameters);
        var result = await modalForm.Result;

        if (!result.Cancelled)
        {
            Contract = await HttpClient.GetFromJsonAsync<ContractDetailVm>($"api/contract/{int.Parse(Id)}");
        }
    }

    private void DownloadFile()
    {
        NavigationManager.NavigateTo($"/api/check/download/{Id}", true);
    }

    private void AddDocument()
    {
        NavigationManager.NavigateTo($"/contract/{Id}/check");
    }

    private Task EditHardware(int id)
    {
        //await HttpClient.PutAsJsonAsync("");
        return Task.CompletedTask;
    }

    private async Task DeleteHardware(int id)
    {
        await HttpClient.DeleteAsync($"api/hardware/{id}");

        Contract = await HttpClient.GetFromJsonAsync<ContractDetailVm>($"api/contract/{int.Parse(Id)}");
    }

    private Task EditSoftware(int id)
    {
        //await HttpClient.PutAsJsonAsync("");
        return Task.CompletedTask;
    }

    private async Task DeleteSoftware(int id)
    {
        await HttpClient.DeleteAsync($"api/software/{id}");

        Contract = await HttpClient.GetFromJsonAsync<ContractDetailVm>($"api/contract/{int.Parse(Id)}");
    }

}
