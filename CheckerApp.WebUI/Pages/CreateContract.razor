@page "/contract/create"

@inject IContractService ContractService
@inject NavigationManager NavigationManager

<EditForm Model="@Command" OnValidSubmit="Submit">
    <FluentValidator/>

    <h3>Новый договор</h3>
    <div class="form-group row">
        <label for="name" class="col-sm-2 col-form-label">
            Название договора
        </label>
        <div class="col-sm-10">
            <InputText id="name" class="form-control" @bind-Value="Command.Name" />
            <ValidationMessage For="(()=>Command.Name)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group row">
        <label for="contract-number" class="col-sm-2 col-form-label">
            Номер договора
        </label>
        <div class="col-sm-10">
            <InputText id="contract-number" class="form-control" @bind-Value="Command.ContractNumber" />
            <ValidationMessage For="(()=>Command.ContractNumber)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group row">
        <label for="domestic-number" class="col-sm-2 col-form-label">
            Внутренний номер договора
        </label>
        <div class="col-sm-10">
            <InputText id="domestic-number" class="form-control" @bind-Value="Command.DomesticNumber" />
            <ValidationMessage For="(()=>Command.DomesticNumber)"></ValidationMessage>
        </div>
    </div>

    <button class="btn btn-primary" type="submit"><span class="oi oi-plus"></span> Добавить</button>
</EditForm>

@code {

    CreateContractVm Command { get; set; } = new CreateContractVm();

    protected async Task Submit()
    {
        var contractId = await ContractService.CreateContract(Command);

        NavigationManager.NavigateTo($"/contract/detail/{contractId}");
    }

}
