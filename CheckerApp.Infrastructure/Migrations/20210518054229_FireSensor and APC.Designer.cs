// <auto-generated />
using System;
using CheckerApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CheckerApp.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210518054229_FireSensor and APC")]
    partial class FireSensorandAPC
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CheckerApp.Domain.Entities.CheckEntities.CheckParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HardwareCheckId")
                        .HasColumnType("int");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Result")
                        .HasColumnType("bit");

                    b.Property<int?>("SoftwareCheckId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HardwareCheckId");

                    b.HasIndex("SoftwareCheckId");

                    b.ToTable("CheckParameters");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.CheckEntities.HardwareCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HardwareId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HardwareId")
                        .IsUnique();

                    b.ToTable("HardwareChecks");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.CheckEntities.SoftwareCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SoftwareId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SoftwareId")
                        .IsUnique();

                    b.ToTable("SoftwareChecks");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.ContractEntities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomesticNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasProtocol")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.Hardware", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("Hardwares");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.SoftwareEntities.Software", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SoftwareType")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("Softwares");

                    b.HasDiscriminator<int>("SoftwareType").HasValue(1);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "c67a3799-4405-474f-915b-99536fb79d57",
                            ConcurrencyStamp = "b7586d82-fc0a-4020-a0fd-e8fbbd14a9a1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ad4579a9-5676-4450-941c-b84ed4bb70fc",
                            ConcurrencyStamp = "bc5f41a8-14b2-4f79-ba35-a00e890fdb74",
                            Name = "SuperUser",
                            NormalizedName = "SUPERUSER"
                        },
                        new
                        {
                            Id = "b29ba8e5-8cdf-4472-90c7-bf670da69bab",
                            ConcurrencyStamp = "b96f4f2e-8165-4e8a-a805-99b8b2146d45",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.APC", b =>
                {
                    b.HasBaseType("CheckerApp.Domain.Entities.HardwareEntities.Hardware");

                    b.ToTable("APCs");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.ARM", b =>
                {
                    b.HasBaseType("CheckerApp.Domain.Entities.HardwareEntities.Hardware");

                    b.Property<bool>("HasRAID")
                        .HasColumnType("bit");

                    b.Property<string>("Keyboard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyboardSN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Monitor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MonitorSN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mouse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MouseSN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductKeyOS")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ARMs");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.Cabinet", b =>
                {
                    b.HasBaseType("CheckerApp.Domain.Entities.HardwareEntities.Hardware");

                    b.Property<DateTime>("Constructed")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConstructedBy")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Cabinets");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.DiffPressure", b =>
                {
                    b.HasBaseType("CheckerApp.Domain.Entities.HardwareEntities.Hardware");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaxValue")
                        .HasColumnType("float");

                    b.Property<double>("MinValue")
                        .HasColumnType("float");

                    b.Property<int>("SignalType")
                        .HasColumnType("int");

                    b.ToTable("DiffPressures");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.FireSensor", b =>
                {
                    b.HasBaseType("CheckerApp.Domain.Entities.HardwareEntities.Hardware");

                    b.ToTable("FireSensors");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.FlowComputer", b =>
                {
                    b.HasBaseType("CheckerApp.Domain.Entities.HardwareEntities.Hardware");

                    b.Property<string>("AssemblyVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CRC32")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("LastConfigDate")
                        .HasColumnType("decimal(20,0)");

                    b.ToTable("FlowComputers");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.Flowmeter", b =>
                {
                    b.HasBaseType("CheckerApp.Domain.Entities.HardwareEntities.Hardware");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Kfactor")
                        .HasColumnType("float");

                    b.Property<double>("MaxValue")
                        .HasColumnType("float");

                    b.Property<double>("MinValue")
                        .HasColumnType("float");

                    b.Property<int>("SignalType")
                        .HasColumnType("int");

                    b.ToTable("Flowmeters");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.GasAnalyzer", b =>
                {
                    b.HasBaseType("CheckerApp.Domain.Entities.HardwareEntities.Hardware");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaxValue")
                        .HasColumnType("float");

                    b.Property<double>("MinValue")
                        .HasColumnType("float");

                    b.Property<int>("SignalType")
                        .HasColumnType("int");

                    b.ToTable("GasAnalyzers");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.InformPanel", b =>
                {
                    b.HasBaseType("CheckerApp.Domain.Entities.HardwareEntities.Hardware");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PanelType")
                        .HasColumnType("int");

                    b.ToTable("InformPanels");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.NetworkHardware", b =>
                {
                    b.HasBaseType("CheckerApp.Domain.Entities.HardwareEntities.Hardware");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mask")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("NetworkHardwares");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.PLC", b =>
                {
                    b.HasBaseType("CheckerApp.Domain.Entities.HardwareEntities.Hardware");

                    b.Property<string>("AssemblyVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("PLCs");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.Pressure", b =>
                {
                    b.HasBaseType("CheckerApp.Domain.Entities.HardwareEntities.Hardware");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaxValue")
                        .HasColumnType("float");

                    b.Property<double>("MinValue")
                        .HasColumnType("float");

                    b.Property<int>("SignalType")
                        .HasColumnType("int");

                    b.ToTable("Pressures");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.Temperature", b =>
                {
                    b.HasBaseType("CheckerApp.Domain.Entities.HardwareEntities.Hardware");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaxValue")
                        .HasColumnType("float");

                    b.Property<double>("MinValue")
                        .HasColumnType("float");

                    b.Property<int>("SignalType")
                        .HasColumnType("int");

                    b.ToTable("Temperatures");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.Valve", b =>
                {
                    b.HasBaseType("CheckerApp.Domain.Entities.HardwareEntities.Hardware");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SignalType")
                        .HasColumnType("int");

                    b.ToTable("Valves");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.SoftwareEntities.SCADA", b =>
                {
                    b.HasBaseType("CheckerApp.Domain.Entities.SoftwareEntities.Software");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.CheckEntities.CheckParameter", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.CheckEntities.HardwareCheck", null)
                        .WithMany("CheckParameters")
                        .HasForeignKey("HardwareCheckId");

                    b.HasOne("CheckerApp.Domain.Entities.CheckEntities.SoftwareCheck", null)
                        .WithMany("CheckParameters")
                        .HasForeignKey("SoftwareCheckId");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.CheckEntities.HardwareCheck", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.HardwareEntities.Hardware", "Hardware")
                        .WithOne("CheckResult")
                        .HasForeignKey("CheckerApp.Domain.Entities.CheckEntities.HardwareCheck", "HardwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hardware");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.CheckEntities.SoftwareCheck", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.SoftwareEntities.Software", "Software")
                        .WithOne("CheckResult")
                        .HasForeignKey("CheckerApp.Domain.Entities.CheckEntities.SoftwareCheck", "SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Software");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.Hardware", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.ContractEntities.Contract", null)
                        .WithMany("HardwareList")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.SoftwareEntities.Software", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.ContractEntities.Contract", null)
                        .WithMany("SoftwareList")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CheckerApp.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.APC", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.HardwareEntities.Hardware", null)
                        .WithOne()
                        .HasForeignKey("CheckerApp.Domain.Entities.HardwareEntities.APC", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.ARM", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.HardwareEntities.Hardware", null)
                        .WithOne()
                        .HasForeignKey("CheckerApp.Domain.Entities.HardwareEntities.ARM", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.OwnsMany("CheckerApp.Domain.Entities.HardwareEntities.NetworkAdapter", "NetworkAdapters", b1 =>
                        {
                            b1.Property<int>("ARMId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("IP")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MacAddress")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ARMId", "Id");

                            b1.ToTable("NetworkAdapters");

                            b1.WithOwner()
                                .HasForeignKey("ARMId");
                        });

                    b.Navigation("NetworkAdapters");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.Cabinet", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.HardwareEntities.Hardware", null)
                        .WithOne()
                        .HasForeignKey("CheckerApp.Domain.Entities.HardwareEntities.Cabinet", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.DiffPressure", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.HardwareEntities.Hardware", null)
                        .WithOne()
                        .HasForeignKey("CheckerApp.Domain.Entities.HardwareEntities.DiffPressure", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.FireSensor", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.HardwareEntities.Hardware", null)
                        .WithOne()
                        .HasForeignKey("CheckerApp.Domain.Entities.HardwareEntities.FireSensor", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.FlowComputer", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.HardwareEntities.Hardware", null)
                        .WithOne()
                        .HasForeignKey("CheckerApp.Domain.Entities.HardwareEntities.FlowComputer", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.Flowmeter", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.HardwareEntities.Hardware", null)
                        .WithOne()
                        .HasForeignKey("CheckerApp.Domain.Entities.HardwareEntities.Flowmeter", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.OwnsOne("CheckerApp.Domain.Entities.HardwareEntities.ModbusSettings", "Settings", b1 =>
                        {
                            b1.Property<int>("FlowmeterId")
                                .HasColumnType("int");

                            b1.Property<long>("Address")
                                .HasColumnType("bigint");

                            b1.Property<string>("BoudRate")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DataBits")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Parity")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StopBit")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("FlowmeterId");

                            b1.ToTable("FlowmeterSettings");

                            b1.WithOwner()
                                .HasForeignKey("FlowmeterId");
                        });

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.GasAnalyzer", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.HardwareEntities.Hardware", null)
                        .WithOne()
                        .HasForeignKey("CheckerApp.Domain.Entities.HardwareEntities.GasAnalyzer", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.InformPanel", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.HardwareEntities.Hardware", null)
                        .WithOne()
                        .HasForeignKey("CheckerApp.Domain.Entities.HardwareEntities.InformPanel", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.NetworkHardware", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.HardwareEntities.Hardware", null)
                        .WithOne()
                        .HasForeignKey("CheckerApp.Domain.Entities.HardwareEntities.NetworkHardware", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.OwnsMany("CheckerApp.Domain.Entities.HardwareEntities.NetworkDevice", "NetworkDevices", b1 =>
                        {
                            b1.Property<int>("NetworkHardwareId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("IP")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MacAddress")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("NetworkHardwareId", "Id");

                            b1.ToTable("NetworkDevices");

                            b1.WithOwner()
                                .HasForeignKey("NetworkHardwareId");
                        });

                    b.Navigation("NetworkDevices");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.PLC", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.HardwareEntities.Hardware", null)
                        .WithOne()
                        .HasForeignKey("CheckerApp.Domain.Entities.HardwareEntities.PLC", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.Pressure", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.HardwareEntities.Hardware", null)
                        .WithOne()
                        .HasForeignKey("CheckerApp.Domain.Entities.HardwareEntities.Pressure", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.Temperature", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.HardwareEntities.Hardware", null)
                        .WithOne()
                        .HasForeignKey("CheckerApp.Domain.Entities.HardwareEntities.Temperature", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.Valve", b =>
                {
                    b.HasOne("CheckerApp.Domain.Entities.HardwareEntities.Hardware", null)
                        .WithOne()
                        .HasForeignKey("CheckerApp.Domain.Entities.HardwareEntities.Valve", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.OwnsOne("CheckerApp.Domain.Entities.HardwareEntities.ModbusSettings", "Settings", b1 =>
                        {
                            b1.Property<int>("ValveId")
                                .HasColumnType("int");

                            b1.Property<long>("Address")
                                .HasColumnType("bigint");

                            b1.Property<string>("BoudRate")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DataBits")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Parity")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StopBit")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ValveId");

                            b1.ToTable("ValveSettings");

                            b1.WithOwner()
                                .HasForeignKey("ValveId");
                        });

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.CheckEntities.HardwareCheck", b =>
                {
                    b.Navigation("CheckParameters");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.CheckEntities.SoftwareCheck", b =>
                {
                    b.Navigation("CheckParameters");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.ContractEntities.Contract", b =>
                {
                    b.Navigation("HardwareList");

                    b.Navigation("SoftwareList");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.HardwareEntities.Hardware", b =>
                {
                    b.Navigation("CheckResult");
                });

            modelBuilder.Entity("CheckerApp.Domain.Entities.SoftwareEntities.Software", b =>
                {
                    b.Navigation("CheckResult");
                });
#pragma warning restore 612, 618
        }
    }
}
